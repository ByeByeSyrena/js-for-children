{"mappings":"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","sources":["src/js/battle-ships-second-option.js"],"sourcesContent":["const view = {\n  displayMessage: function (msg) {\n    const messageArea = document.getElementById('messageArea');\n    messageArea.innerHTML = msg;\n  },\n  displayHit: function (location) {\n    const cell = document.getElementById(location);\n    cell.classList.add('hit');\n  },\n  displayMiss: function (location) {\n    const cell = document.getElementById(location);\n    cell.classList.add('miss');\n  },\n};\n\nconst model = {\n  boardSize: 7,\n  numShips: 7,\n  shipsSunk: 0,\n  ships: [],\n\n  fire: function (guess) {\n    for (let i = 0; i < this.numShips; i++) {\n      const ship = this.ships[i];\n      const index = ship.locations.indexOf(guess);\n      if (index >= 0) {\n        ship.hits[index] = 'hit';\n        view.displayHit(guess);\n        view.displayMessage('HIT!');\n        if (this.isSunk(ship)) {\n          view.displayMessage('You sank my battleship!');\n          this.shipsSunk++;\n        }\n        return true;\n      }\n    }\n    view.displayMiss(guess);\n    view.displayMessage('You missed.');\n    return false;\n  },\n\n  isSunk: function (ship) {\n    return ship.hits.every(hit => hit === 'hit');\n  },\n\n  generateShipLocations: function () {\n    let locations;\n\n    for (let i = 0; i < 3; i++) {\n      do {\n        locations = this.generateShip(3);\n      } while (this.collision(locations));\n      this.ships.push({ locations, hits: Array(3).fill('') });\n    }\n\n    for (let i = 0; i < 4; i++) {\n      do {\n        locations = this.generateShip(1);\n      } while (this.collision(locations));\n      this.ships.push({ locations, hits: [''] });\n    }\n  },\n\n  generateShip: function (length) {\n    const direction = Math.floor(Math.random() * 2);\n    let row, col;\n\n    if (direction === 1) {\n      row = Math.floor(Math.random() * this.boardSize);\n      col = Math.floor(Math.random() * (this.boardSize - length + 1));\n    } else {\n      col = Math.floor(Math.random() * this.boardSize);\n      row = Math.floor(Math.random() * (this.boardSize - length + 1));\n    }\n\n    let newShipLocations = [];\n    for (let i = 0; i < length; i++) {\n      if (direction === 1) {\n        newShipLocations.push(row + '' + (col + i));\n      } else {\n        newShipLocations.push(row + i + '' + col);\n      }\n    }\n    return newShipLocations;\n  },\n\n  collision: function (locations) {\n    for (let i = 0; i < this.ships.length; i++) {\n      const ship = this.ships[i];\n      for (let j = 0; j < locations.length; j++) {\n        const adjacentLocations = this.getAdjacentLocations(locations[j]);\n        for (let k = 0; k < adjacentLocations.length; k++) {\n          if (ship.locations.indexOf(adjacentLocations[k]) >= 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  },\n\n  getAdjacentLocations: function (location) {\n    const [row, col] = location.split('').map(Number);\n    const adjacentLocations = [];\n\n    adjacentLocations.push(`${row - 1}${col}`);\n    adjacentLocations.push(`${row + 1}${col}`);\n    adjacentLocations.push(`${row}${col - 1}`);\n    adjacentLocations.push(`${row}${col + 1}`);\n\n    adjacentLocations.push(`${row - 1}${col - 1}`);\n    adjacentLocations.push(`${row - 1}${col + 1}`);\n    adjacentLocations.push(`${row + 1}${col - 1}`);\n    adjacentLocations.push(`${row + 1}${col + 1}`);\n\n    return adjacentLocations;\n  },\n};\n\nfunction handleCellClick(event) {\n  const cell = event.target;\n  const location = cell.id;\n  const hit = model.fire(location);\n  cell.removeEventListener('click', handleCellClick);\n\n  if (hit) {\n    if (model.shipsSunk === model.numShips) {\n      view.displayMessage('You sank all my battleships!');\n      cells.forEach(cell => {\n        cell.removeEventListener('click', handleCellClick);\n      });\n    }\n  }\n}\n\nconst cells = document.querySelectorAll('.board table td');\ncells.forEach(cell => {\n  cell.addEventListener('click', handleCellClick);\n});\n\nmodel.generateShipLocations();\n"],"names":["$c5b2a8be8d2a3dcc$var$view","msg","document","getElementById","innerHTML","location","classList","add","$c5b2a8be8d2a3dcc$var$model","boardSize","numShips","shipsSunk","ships","fire","guess","i","this","ship","index","locations","indexOf","hits","isSunk","every","hit","generateShipLocations","generateShip","collision","push","Array","fill","i1","length","direction","Math","floor","random","row","col","newShipLocations","j","adjacentLocations","getAdjacentLocations","k","split","map","Number","$c5b2a8be8d2a3dcc$var$handleCellClick","event","cell1","target","id","removeEventListener","$c5b2a8be8d2a3dcc$var$cells","forEach","cell","querySelectorAll","addEventListener"],"version":3,"file":"battle-ships-second-option.30026e35.js.map"}